#!/usr/bin/env python

import sys

import rospy
from image_recognition_msgs.msg import Recognitions
from rasberry_hri.msg import Joints, Joint
from converter import Converter


CATEGORY_JOINTS_OPENPOSE_2D_RGB = 3
CATEGORY_JOINTS_OPENPOSE_2D_THERMAL = 4

def get_model_prototype():
    return {
        'Neck-X': -1.0,
        'Neck-Y': -1.0,
        'Neck-Z': -1.0,
        'Right:Wrist-X': -1.0,
        'Right:Wrist-Y': -1.0,
        'Left:Wrist-X': -1.0,
        'Left:Wrist-Y': -1.0,
        'Right:Elbow-X': -1.0,
        'Right:Elbow-Y': -1.0,
        'Left:Elbow-X': -1.0,
        'Left:Elbow-Y': -1.0,
        'Right:Shoulder-X': -1.0,
        'Right:Shoulder-Y': -1.0,
        'Right:Shoulder-Z': -1.0,
        'Left:Shoulder-X': -1.0,
        'Left:Shoulder-Y': -1.0,
        'Left:Shoulder-Z': -1.0,
        'Upper-Spine-X': -1.0,
        'Upper-Spine-Y': -1.0,
        'Upper-Spine-Z': -1.0,
        'Mid-Spine-X': -1.0,
        'Mid-Spine-Y': -1.0,
        'Mid-Spine-Z': -1.0,
        'Lower-Spine-X': -1.0,
        'Lower-Spine-Y': -1.0,
        'Lower-Spine-Z': -1.0,
        'Right:Hip-X': -1.0,
        'Right:Hip-Y': -1.0,
        'Right:Hip-Z': -1.0,
        'Left:Hip-X': -1.0,
        'Left:Hip-Y': -1.0,
        'Left:Hip-Z': -1.0,
        'Right:Knee-X': -1.0,
        'Left:Knee-X': -1.0,
        'Right:Ankle-X': -1.0,
        'Right:Ankle-Y': -1.0,
        'Right:Ankle-Z': -1.0,
        'Left:Ankle-X': -1.0,
        'Left:Ankle-Y': -1.0,
        'Left:Ankle-Z': -1.0}.copy()


class SkeletonConverter():

    def __init__(self):
        self.converter = Converter()
        self.count = 10
        rospy.loginfo("SCS: Skeleton Converter Service starting")
        rospy.init_node('skeleton_converter', anonymous=False)
        rospy.loginfo("SCS: Subscribing to /lcas/hri/joint_positions")

        self.publisher = rospy.Publisher('/lcas/hri/skeleton_model/angles', Joints, queue_size=10)
        rospy.Subscriber("/lcas/hri/joint_positions", Recognitions, self.openPoseCallback)


    def openPoseCallback(self, msg):
        self.converter.create_index_map(msg.recognitions)
        if (self.count < 100000):
            self.count += 1
            # convert x/y offsets to values relative to some reference point (neck?)
            # adjust joint number and setup and labels
            model = get_model_prototype()
            for id in ['Neck-Z', 'Upper-Spine-X', 'Mid-Spine-X', 'Lower-Spine-X']:
                try:
                    model[id] = self.converter.get_angle2(id)
                except:
                    pass

            for id in ['Right:Elbow-X', 'Upper-Spine-X', 'Mid-Spine-X', 'Lower-Spine-X', 'Left:Elbow-X', 'Right:Shoulder-X', 'Left:Shoulder-X', 'Right:Hip-X', 'Left:Hip-X', 'Right:Knee-X', 'Left:Knee-X']:
                try:
                    model[id] = self.converter.get_angle1(id)
                except:
                    pass
            outmsg = Joints()
            outmsg.header.stamp = msg.header.stamp
            outmsg.name = [msg.header.frame_id + "-LElbow"]
            outmsg.joints = []
            for label,angle in model:
                joint = Joint()
                joint.label = label
                joint.angle = angle
                outmsg.joints.append(joint)
            self.publisher.publish(outmsg)
            # if msg.header.frame_id == "RGB":
            #     self.model.add_sample(CATEGORY_JOINTS_OPENPOSE_2D_RGB, msg.header.stamp, model)
            # elif msg.header.frame_id == "THERMAL":
            #     self.model.add_sample(CATEGORY_JOINTS_OPENPOSE_2D_THERMAL, msg.header.stamp, model)
            # else:
            #     print("unknown category")
            #self.model.classify(inp)



if __name__ == '__main__':
    rospy.myargv(argv=sys.argv)
    sm = SkeletonConverter()
    rospy.spin()

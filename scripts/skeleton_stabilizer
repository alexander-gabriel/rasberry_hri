#!/usr/bin/env python

import sys
from threading import Thread

# import simdkalman
# import numpy as np
import rospy

from converter import Converter
from image_recognition_msgs.msg import Recognitions
from rasberry_hri.msg import Joints, Joint

PUBLISHING_RATE = 30 #Hz
CATEGORY_JOINTS_OPENPOSE_2D_RGB = 3
CATEGORY_JOINTS_OPENPOSE_2D_THERMAL = 4

def get_model_prototype():
    return {
        'Neck-X': -1.0,
        'Neck-Y': -1.0,
        'Neck-Z': -1.0,
        'Right:Wrist-X': -1.0,
        'Right:Wrist-Y': -1.0,
        'Left:Wrist-X': -1.0,
        'Left:Wrist-Y': -1.0,
        'Right:Elbow-X': -1.0,
        'Right:Elbow-Y': -1.0,
        'Left:Elbow-X': -1.0,
        'Left:Elbow-Y': -1.0,
        'Right:Shoulder-X': -1.0,
        'Right:Shoulder-Y': -1.0,
        'Right:Shoulder-Z': -1.0,
        'Left:Shoulder-X': -1.0,
        'Left:Shoulder-Y': -1.0,
        'Left:Shoulder-Z': -1.0,
        'Upper-Spine-X': -1.0,
        'Upper-Spine-Y': -1.0,
        'Upper-Spine-Z': -1.0,
        'Mid-Spine-X': -1.0,
        'Mid-Spine-Y': -1.0,
        'Mid-Spine-Z': -1.0,
        'Lower-Spine-X': -1.0,
        'Lower-Spine-Y': -1.0,
        'Lower-Spine-Z': -1.0,
        'Right:Hip-X': -1.0,
        'Right:Hip-Y': -1.0,
        'Right:Hip-Z': -1.0,
        'Left:Hip-X': -1.0,
        'Left:Hip-Y': -1.0,
        'Left:Hip-Z': -1.0,
        'Right:Knee-X': -1.0,
        'Left:Knee-X': -1.0,
        'Right:Ankle-X': -1.0,
        'Right:Ankle-Y': -1.0,
        'Right:Ankle-Z': -1.0,
        'Left:Ankle-X': -1.0,
        'Left:Ankle-Y': -1.0,
        'Left:Ankle-Z': -1.0}.copy()


class Publisher(Thread):
    def __init__(self, model):
        Thread.__init__(self)
        self.model = model
        self.position_publisher = rospy.Publisher('/lcas/hri/joints/positions/stabilized', Recognitions, queue_size=10)
        #self.angle_publisher = rospy.Publisher('/lcas/people_detection/skeleton_model/angles', JointState, queue_size=10)
        self.rate = rospy.Rate(PUBLISHING_RATE)


    def run(self):
        while not rospy.is_shutdown():
            msg = Recognitions()
            msg.header.stamp = rospy.get_rostime()
            msg.recognitions = self.model.get_recognitions()
            self.position_publisher.publish(msg)
            self.rate.sleep()


class Model:

    def __init__(self, ):
        self.samples = list()
        initial_model = get_model_prototype()
        for joint in initial_model.keys():
            initial_model[joint] = 0
        self.samples.append((initial_model, 0.0))



    def add_sample(self, joints, header):
        any_data = False
        for label, joints in sample.items():
            pass
        if any_data:
            self.samples.append((sample, timestamp))

    def get_recognitions(self):
        for sample,timestamp in self.samples:
            pass

    def get_distribution(self):
        iterator = iter(self.samples)
        samples = {}
        try:
            sample, timestamp = next(iterator)
            if not sample == None:
                for joint in sample.keys():
                    samples[joint] = [sample[joint]]
                cutoff_time = timestamp - COLLECTION_TIMEFRAME
                while timestamp > cutoff_time:
                    try:
                        sample, timestamp = next(iterator)
                        for joint in sample.keys():
                            samples[joint].append(sample[joint])
                    except StopIteration:
                        break
                model = get_probability_model_prototype()
                for joint in samples.keys():
                    model[joint] = [mean(samples[joint]), std(samples[joint])]
                return model
        except StopIteration:
            return None


class SkeletonStabilizer():

    def __init__(self):
        rospy.loginfo("SSS: Skeleton Stabilizer Service starting")
        rospy.init_node('skeleton_stabilizer', anonymous=False)
        self.converter = Converter()
        self.model = Model()
        self.publisher = Publisher(self.model)
        self.publisher.start()

        rospy.loginfo("SSS: Subscribing to /lcas/hri/joint_positions")

        self.publisher = rospy.Publisher('/lcas/hri/joint_positions_stabilized', Recognitions, queue_size=10)
        rospy.Subscriber("/lcas/hri/joint_positions", Recognitions, self.openPoseCallback)


    def openPoseCallback(self, msg):
        print(msg)
        self.model.add_sample(self.converter.from_openpose(msg.recognitions), msg.header)
        # convert x/y offsets to values relative to some reference point (neck?)
        # adjust joint number and setup and labels
        # model = get_model_prototype()
        # for id in ['Neck-Z', 'Upper-Spine-X', 'Mid-Spine-X', 'Lower-Spine-X']:
        #     try:
        #         model[id] = self.converter.get_angle2(id)
        #     except:
        #         pass
        #
        # for id in ['Right:Elbow-X', 'Upper-Spine-X', 'Mid-Spine-X', 'Lower-Spine-X', 'Left:Elbow-X', 'Right:Shoulder-X', 'Left:Shoulder-X', 'Right:Hip-X', 'Left:Hip-X', 'Right:Knee-X', 'Left:Knee-X']:
        #     try:
        #         model[id] = self.converter.get_angle1(id)
        #     except:
        #         pass
        # outmsg = Joints()
        # outmsg.header.stamp = msg.header.stamp
        # outmsg.source = msg.header.frame_id + "-LElbow"
        # outmsg.joints = []
        # for label,angle in model.items():
        #     joint = Joint()
        #     joint.label = label
        #     joint.angle = angle
        #     outmsg.joints.append(joint)
        # self.publisher.publish(outmsg)
        # if msg.header.frame_id == "RGB":
        #     self.model.add_sample(CATEGORY_JOINTS_OPENPOSE_2D_RGB, msg.header.stamp, model)
        # elif msg.header.frame_id == "THERMAL":
        #     self.model.add_sample(CATEGORY_JOINTS_OPENPOSE_2D_THERMAL, msg.header.stamp, model)
        # else:
        #     print("unknown category")
        #self.model.classify(inp)



if __name__ == '__main__':
    rospy.myargv(argv=sys.argv)
    sm = SkeletonStabilizer()
    rospy.spin()

#!/usr/bin/env python

from converter import Converter
from sensor_msgs.msg import JointState

CATEGORY_JOINTS_OPENPOSE_2D_RGB = 3
CATEGORY_JOINTS_OPENPOSE_2D_THERMAL = 4


class SkeletonConverter():

    def __init__(self):
        rospy.Subscriber("/lcas/hri/joint_positions", Recognitions, self.openPoseCallback)
        self.publisher = rospy.Publisher('/lcas/hri/skeleton_model/angles', JointState, queue_size=10)

    def openPoseCallback(self, msg):
        self.converter.create_index_map(msg.recognitions)
        if (self.count < 100000):
            self.count += 1
            # convert x/y offsets to values relative to some reference point (neck?)
            # adjust joint number and setup and labels
            model = get_model_prototype()
            for id in ['Neck-Z', 'Upper-Spine-X', 'Mid-Spine-X', 'Lower-Spine-X']:
                try:
                    model[id] = self.converter.get_angle2(id)
                except:
                    pass

            for id in ['Right:Elbow-X', 'Upper-Spine-X', 'Mid-Spine-X', 'Lower-Spine-X', 'Left:Elbow-X', 'Right:Shoulder-X', 'Left:Shoulder-X', 'Right:Hip-X', 'Left:Hip-X', 'Right:Knee-X', 'Left:Knee-X']:
                try:
                    model[id] = self.converter.get_angle1(id)
                except:
                    pass
            outmsg = JointState()
            outmsg.header.stamp = msg.header.stamp
            outmsg.name = [msg.header.frame_id + "-LElbow"]
            outmsg.position = [model['Left:Elbow-X']]
            self.publisher.publish(outmsg)
            if msg.header.frame_id == "RGB":
                self.model.add_sample(CATEGORY_JOINTS_OPENPOSE_2D_RGB, msg.header.stamp, model)
            elif msg.header.frame_id == "THERMAL":
                self.model.add_sample(CATEGORY_JOINTS_OPENPOSE_2D_THERMAL, msg.header.stamp, model)
            else:
                print("unknown category")
            #self.model.classify(inp)



if __name__ == '__main__':
    rospy.myargv(argv=sys.argv)
    sm = SkeletonConverter()
    rospy.spin()

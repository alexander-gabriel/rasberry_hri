///formulas


//basic abilities and desires


is_a(mobile,Robot) v is_a(mobile,Human) <=> is_mobile(mobile).

!is_a(nonhuman,Human) => !(has_requested_crate(nonhuman) v has_crate(nonhuman)).

//location reasoning


place1=place2 => (!leads_to(place1,place2) ^ !free_path(place1,place2)).


leads_to(place1,place2) => linked(place1,place2).

linked(place1,place2) ^ linked(place2,place3) ^ !(place1=place3) => linked(place1,place3).

leads_to(place1,place2) ^ !(EXIST thing (is_at(thing,place2))) ^ (free_path(place2,place3) v place2=place3) => free_path(place1,place3).


!(mobile=object) ^ is_at(mobile,place1) ^ is_mobile(mobile) ^ is_at(object,place2) ^ (free_path(place1,place2) v leads_to(place1,place2)) => can_reach(mobile,object).

is_at(thing,place1) ^ is_at(object,place2) ^ (!(free_path(place1,place2) v leads_to(place1,place2)) v !is_mobile(thing)) => !can_reach(thing,object).


!(thing1=thing2) ^ is_at(thing1,place1) ^ is_at(thing2,place1) => colocated(thing1,thing2).

!(thing1=thing2) ^ !(place1=place2) ^ is_at(thing1,place1) ^ is_at(thing2,place2) => !colocated(thing1,thing2).


// crate logic




has_crate(human) => !has_requested_crate(human).

// -- scenarios --

// bring crate

is_a(human,Human) ^ is_a(robot,Robot) ^ has_requested_crate(human) ^ can_reach(robot,human) => moveTo(robot,human).
is_a(human,Human) ^ is_a(robot,Robot) ^ (!has_requested_crate(human) v !can_reach(robot,human)) => !moveTo(robot,human).


// make way

is_a(human,Human) ^ is_a(robot,Robot) ^ is_a(plant,Plant) ^ has_crate(human) ^ !can_reach(human,plant) ^ can_reach(robot, plant) ^ can_reach(human,robot) => moveTo(robot,plant).


// approach setting

is_a(human,Human) ^ is_a(robot,Robot) ^ is_a(crate,Crate) ^ !has_crate(human) ^ can_reach(human,robot) ^ !can_reach(human,crate) ^ can_reach(robot,crate) => moveTo(robot,crate).


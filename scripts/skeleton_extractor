#!/usr/bin/env python
import sys
import threading
import subprocess
from time import sleep
from collections import deque

import roslaunch
import rosgraph
import rospy
from sensor_msgs.msg import Image
from image_recognition_msgs.msg import Recognitions
from image_recognition_msgs.srv import Recognize

class Openpose(threading.Thread):

    RGB = True
    THERMAL = False

    def __init__(self, service):
        threading.Thread.__init__(self)
        self.service = service
        self.publisher = rospy.Publisher('/lcas/hri/joints/positions/raw', Recognitions, queue_size=10)
        self.died = False
        self.last_processed = Openpose.RGB
        self.latest_rgb = deque(maxlen=1)
        self.latest_thermal = deque(maxlen=1)


    def run(self):
        while rosgraph.is_master_online() and not self.died:
            try:
                #self.last_processed = not self.last_processed
                if self.last_processed == Openpose.RGB and self.latest_rgb:
                    latest = self.latest_rgb.pop()
                    response = self.service(latest)
                    self.send_message(response, "RGB", latest.header.stamp)
                elif self.last_processed == Openpose.THERMAL and self.latest_thermal:
                    latest = self.latest_thermal.pop()
                    response = self.service(latest)
                    self.send_message(response, "THERMAL", latest.header.stamp)
                else:
                    sleep(0.025)

            except rospy.ServiceException as exc:
                self.died = True
                print("Service did not process request: " + str(exc))
            except KeyboardInterrupt:
                rospy.signal_shutdown("killed")


    def send_message(self, response, category, timestamp):
        msg = Recognitions()
        msg.recognitions = response.recognitions
        msg.header.frame_id = category
        msg.header.stamp = timestamp
        self.publisher.publish(msg)



class SkeletonExtractor:

    def __init__(self):
        rospy.loginfo("SES: Skeleton Extractor Service starting")
        rospy.init_node('skeleton_extractor', anonymous=False)
        rospy.loginfo("SES: Waiting for openpose_ros_node")
        rospy.wait_for_service('recognize')
        self.interface = rospy.ServiceProxy('recognize', Recognize)
        self.service = Openpose(self.interface)

        # realsense D415
        rospy.loginfo("SES: Subscribing to realsense D415")
        rospy.Subscriber("/camera/color/image_raw", Image, self.callback_rgb)
        # rospy.Subscriber("/camera/depth/image_rect_raw", Image, self.callback_depth)
        # rospy.Subscriber("/camera/infra1/image_rect_raw", Image, self.callback_infra1)
        # rospy.Subscriber("/camera/infra2/image_rect_raw", Image, self.callback_infra2)

        # ZED camera
        # rospy.Subscriber("/zed/left/image_rect_color", Image, self.callback_rgb)

        # Thermal camera
        # rospy.Subscriber("/optris/thermal_image_view", Image, self.callback_thermal)
        rospy.loginfo("SES: Initialization Complete")



    def callback_rgb(self, data):
        self.service.latest_rgb.append(data)


    def callback_thermal(self, data):
        self.service.latest_thermal.append(data)



if __name__ == '__main__':
    rospy.myargv(argv=sys.argv)
    se = SkeletonExtractor()
    se.service.start()
    rospy.spin()

class = {Human, Robot, Plant, Object, Place, Crate}
role = {Supervisor, Picker}


// --- predicates ---

is_a(thing,class?)
is_mobile(thing)
has_role(thing,role?)

//tpcc
sam(place,place) // same position
dou(place,place) //same position
tri(place,place) //same position
// left back: less left than back; back left: less back than left <- importance increasing to the right

//close
clb(place,place) // close left back
cbl(place,place) // close back left
csl(place,place) // close straight left  -- left
cfl(place,place) // close front left
clf(place,place) // close left front
csf(place,place) // close straight front  -- before
crf(place,place) // close right front
cfr(place,place) // close front right
csr(place,place) // close straight right  -- right
cbr(place,place) // close back right
crb(place,place) // close right back
csb(place,place) // close straight back  -- behind

//distant
dlb(place,place) // distant left back
dbl(place,place) // distant back left
dsl(place,place) // distant straight left  -- left
dfl(place,place) // distant front left
dlf(place,place) // distant left front
dsf(place,place) // distant straight front  -- before
drf(place,place) // distant right front
dfr(place,place) // distant front right
dsr(place,place) // distant straight right  -- right
dbr(place,place) // distant back right
drb(place,place) // distant right back
dsb(place,place) // distant straight back -- behind


// location predicates
is_at(thing,place)
colocated(thing,thing)
can_reach(thing,thing)
goto(thing,thing)
is_near(thing,thing)
is_facing(thing,thing)
leads_to(place,place)
linked(place,place)
carries_berries(place)


// crate status predicates
has_crate(thing)
wants_crate(thing)
has_requested_crate(thing)



// --- formulas ---


//location reasoning

!leads_to(?place1,?place1).

#fixweight
leads_to(?place1,?place2) => linked(?place1,?place2).
#fixweight
linked(?place1,?place2) ^ linked(?place2,?place3) => linked(?place1,?place3).

#fixweight
is_at(?mobile,?place1) ^ is_mobile(?mobile) ^ is_at(?object,?place2) ^ linked(?place1,?place2) => can_reach(?mobile,?object).

#fixweight
is_at(?thing1,?place1) ^ is_at(?thing2,?place1) ^ ?thing1 =/= ?thing2 => colocated(?thing1, ?thing2) ^ colocated(?thing2, ?thing1).

//basic abilities and desires


#fixweight
is_a(?plant,Plant) => !is_mobile(?plant).
#fixweight
is_a(?plant,Plant) => !has_crate(?plant).
#fixweight
is_a(?plant,Plant) => !wants_crate(?plant).
#fixweight
is_a(?plant,Plant) => !has_role(?plant,?y).




#fixweight
is_a(?object,Object) => !is_mobile(?object).
#fixweight
is_a(?object,Object) => !has_crate(?object).
#fixweight
is_a(?object,Object) => !wants_crate(?object).
#fixweight
is_a(?object,Object) => !has_role(?object,?y).



#fixweight
is_a(?place,Place) => !is_mobile(?place).
#fixweight
is_a(?place,Place) => !wants_crate(?place).
#fixweight
is_a(?place,Place) => !has_role(?place,?y).



#fixweight
is_a(?robot,Robot) => is_mobile(?robot).
#fixweight
is_a(?robot,Robot) => !has_role(?robot,?y).
#fixweight
is_a(?robot, Robot) => !has_requested_crate(?robot).



#fixweight
is_a(?human,Human) => is_mobile(?human).



// mobility

#fixweight
is_mobile(?mobile) => !can_reach(?mobile,?mobile).
#fixweight
!is_mobile(?mobile) => !can_reach(?mobile,?thing).


// crate logic

#fixweight
(is_a(?human,Human) ^ has_role(?human,Picker) ^ !has_crate(?human)) => wants_crate(?human).
#fixweight
(is_a(?human,Human) ^ has_role(?human,Picker) ^ has_crate(?human)) => !wants_crate(?human).
#fixweight
has_crate(?mobile) => !has_requested_crate(?mobile).


// roles
#fixweight
(is_a(?human,Human) ^ has_crate(?human)) => has_role(?human,Picker).

#fixweight
has_role(?human,Supervisor) => !wants_crate(?human).

// bring crate setting
#fixweight
(is_a(?human,Human) ^ is_a(?robot,Robot) ^ has_requested_crate(?human)) => goto(?robot,?human).


// make way setting
#fixweight
(is_a(?human,Human) ^ is_a(?robot,Robot) ^ has_crate(?human) ^ is_a(?plant,Plant) ^ !can_reach(?human,?plant) ^ !has_requested_crate(?human)) => goto(?robot,?plant).


// approach setting
#fixweight
(is_a(?human,Human) ^ is_a(?robot,Robot) ^ is_at(?robot,?place1) ^ is_a(?crate, Crate) ^ is_at(?crate,?place2) ^ !has_crate(?human) ^ (csb(?place1,?place2)v dsb(?place1,?place2))) => goto(?robot,?crate).

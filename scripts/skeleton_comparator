#!/usr/bin/env python

import sys

import rospy
from rasberry_hri.msg import Joints, Joint, Pose
from classifiers import MinimumDifferenceClassifier

def get_model_prototype():
    return {
        'Neck-X': -1.0,
        'Neck-Y': -1.0,
        'Neck-Z': -1.0,
        'Right:Wrist-X': -1.0,
        'Right:Wrist-Y': -1.0,
        'Left:Wrist-X': -1.0,
        'Left:Wrist-Y': -1.0,
        'Right:Elbow-X': -1.0,
        'Right:Elbow-Y': -1.0,
        'Left:Elbow-X': -1.0,
        'Left:Elbow-Y': -1.0,
        'Right:Shoulder-X': -1.0,
        'Right:Shoulder-Y': -1.0,
        'Right:Shoulder-Z': -1.0,
        'Left:Shoulder-X': -1.0,
        'Left:Shoulder-Y': -1.0,
        'Left:Shoulder-Z': -1.0,
        'Upper-Spine-X': -1.0,
        'Upper-Spine-Y': -1.0,
        'Upper-Spine-Z': -1.0,
        'Mid-Spine-X': -1.0,
        'Mid-Spine-Y': -1.0,
        'Mid-Spine-Z': -1.0,
        'Lower-Spine-X': -1.0,
        'Lower-Spine-Y': -1.0,
        'Lower-Spine-Z': -1.0,
        'Right:Hip-X': -1.0,
        'Right:Hip-Y': -1.0,
        'Right:Hip-Z': -1.0,
        'Left:Hip-X': -1.0,
        'Left:Hip-Y': -1.0,
        'Left:Hip-Z': -1.0,
        'Right:Knee-X': -1.0,
        'Left:Knee-X': -1.0,
        'Right:Ankle-X': -1.0,
        'Right:Ankle-Y': -1.0,
        'Right:Ankle-Z': -1.0,
        'Left:Ankle-X': -1.0,
        'Left:Ankle-Y': -1.0,
        'Left:Ankle-Z': -1.0}.copy()



class SkeletonComparator():

    def __init__(self):
        rospy.loginfo("SkelComp: Skeleton Comparator Service starting")
        rospy.init_node('skeleton_comparator', anonymous=False)
        rospy.loginfo("SkelComp: Subscribing to /lcas/hri/joints/angles")

        self.classifier = MinimumDifferenceClassifier()
        self.publisher = rospy.Publisher('/lcas/hri/poses', Pose, queue_size=10)
        rospy.Subscriber("/lcas/hri/joints/angles", Joints, self.angle_callback)

    def angle_callback(self, msg):
        model = get_model_prototype()
        pose = dict()
        limit = 20
        for joint in msg.joints:
            pose[joint.label] = joint.angle
        pose_label, error = self.classifier.classify(pose)
        if error < limit:
            outmsg = Pose()
            outmsg.header.stamp = msg.header.stamp
            outmsg.pose = pose_label
            self.publisher.publish(outmsg)

if __name__ == '__main__':
    rospy.myargv(argv=sys.argv)
    sm = SkeletonComparator()
    rospy.spin()

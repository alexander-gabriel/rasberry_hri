#!/usr/bin/env python

import sys
import time
import json
from hashlib import sha256

import rospy
from experiments.config import Config
from experiments.experimenter import Experimenter
from common.parameters import BEHAVIOURS


# x TODO: storage of rosbag action data (start, end, filename, classification)
# x TODO: keeping track of time (subscribing to the simulation clock, launching events at predefined time steps)
# x TODO: start rosbag from experimenter
# x TODO: in worldstate: add trajectory calculus, generate labels for human movement relative to his node location as seen from the robot's perspective
# x TODO: generate human behavior events from observed movement
# x TODO: add distance metric and emergency stop
# x TODO: check reasoning
# x TODO: check experimenter

# . TODO: check pose detection

# . TODO: add pose for picking berries
# . TODO: add pose for call
# . TODO: add pose for cancel
# . TODO: add pose for stop
# . TODO: in bdi system: pause, start simulation, change simulation realtime factor


# self.behaviours = {120: {"start": None,
#                     "duration": None,
#                     "filename": None,
#                     "label": None,
#                     "type": "action"},
#                 240: {"label": None,
#                     "type": "movement"},
#                     }


if __name__ == "__main__":

    rospy.init_node("experiment_node")
    rospy.myargv(argv=sys.argv)
    while (rospy.get_time() == 0):
        time.sleep(0.01)

    e = Experimenter()
    # do 5, 7, and 9 later
    print("EXPE: Generating Configurations")
    for subject_id in [1]:  # ,2,3,4,5,6,7,8,9,10]:
        for mode in ["standing"]:  # , "moving"]:
            try:  # evasion
                c = Config(
                    "thorvald_001",
                    "Evasion - Subject {} - Mode {}".format(subject_id, mode),
                )
                c.behaviours = BEHAVIOURS["pass robot"]
                # c.behaviours = {}
                # c.behaviours[2] = {
                #     "type": "message",
                #     "target": "picker_movement",
                #     "message": "evade",
                # }
                c.parameters = {
                    "robot_position": [[11.41, 4.6285]],
                    "called_robot": [False],
                    "has_crate": [True],
                    "crate_full": [False],
                    "picker_speed": [0.7],
                    "no_berry_places": [
                        ["WayPoint103", "WayPoint104", "WayPoint105"]
                    ],
                    "target_picker": ["picker02"],
                    # "target_picker": ["Subject{:02d}-Mode-{:}".format(subject_id, mode)],
                    "iterations": ["30"],
                }
                c.termination_time = 15
                c.experiment_id = sha256(json.dumps(c.behaviours)
                                         + json.dumps(c.parameters)
                                         + str(c.termination_time)).hexdigest()
                # c.update_behaviour_times()
                # e.add_config(c)
            except KeyError as err:
                rospy.logwarn(err)

            try:  # deliver because picker called
                c = Config(
                    "thorvald_001",
                    "Delivery - Subject {} - Mode {}".format(subject_id, mode),
                )
                c.behaviours = BEHAVIOURS["deliver no wait"]
                # c.behaviours[2] = calls[subject_id][mode]
                # c.behaviours[2] = {
                #     "type": "message",
                #     "target": "picker_movement",
                #     "message": "deliver",
                # }
                c.parameters = {
                    "robot_position": [[11.41, 4.6285]],
                    "called_robot": [True],  # , False],
                    "has_crate": [False],
                    "crate_full": [True],  # , False],
                    "picker_speed": [0.7],
                    "full_crate_count": [0],
                    "empty_crate_count": [3],
                    "no_berry_places": [["WayPoint103", "WayPoint104"]],
                    "target_picker": ["picker02"],
                    # "target_picker": ["Subject{:02d}-Mode-{:}".format(subject_id, mode)],
                    "iterations": ["30"],
                }
                c.termination_time = 23
                c.experiment_id = sha256(json.dumps(c.behaviours)
                                         + json.dumps(c.parameters)
                                         + str(c.termination_time)).hexdigest()
                # c.update_behaviour_times()
                # e.add_config(c)
            except KeyError as err:
                rospy.logwarn(err)

            try:  # exchange because picker called
                c = Config(
                    "thorvald_001",
                    "Exchange 1 - Subject {} - Mode {}".format(
                        subject_id, mode
                    ),
                )
                c.behaviours = BEHAVIOURS["exchange no wait"]
                # c.behaviours = {}
                # # c.behaviours[2] = calls[subject_id][mode]
                # c.behaviours[2] = {
                #     "type": "message",
                #     "target": "picker_movement",
                #     "message": "deliver",
                # }
                c.parameters = {
                    "robot_position": [[11.41, 4.6285]],
                    "has_crate": [True],
                    "called_robot": [True],
                    "crate_full": [True],
                    "no_berry_places": [[]],
                    "picker_speed": [0.7],
                    "target_picker": ["picker02"],
                    "iterations": ["30"],
                }
                c.termination_time = 25
                c.experiment_id = sha256(json.dumps(c.behaviours)
                                         + json.dumps(c.parameters)
                                         + str(c.termination_time)).hexdigest()
                # c.update_behaviour_times()
                # e.add_config(c)s
            except KeyError as err:
                rospy.logwarn(err)

            try:  # exchange because crate is full
                c = Config(
                    "thorvald_001",
                    "Exchange 2 - Subject {} - Mode {}".format(
                        subject_id, mode
                    ),
                )
                c.behaviours = BEHAVIOURS["exchange no call"]
                # c.behaviours = {}
                # # c.behaviours[2] = calls[subject_id][mode]
                # c.behaviours[2] = {
                #     "type": "message",
                #     "target": "picker_movement",
                #     "message": "deliver",
                # }
                c.parameters = {
                    "robot_position": [[11.41, 4.6285]],
                    "has_crate": [True],
                    "called_robot": [False],
                    "crate_full": [True],
                    "no_berry_places": [["Waypoint103", "WayPoint104"], []],
                    "picker_speed": [0.7],
                    "target_picker": ["picker02"],
                    "iterations": ["30"],
                }
                c.termination_time = 20
                c.experiment_id = sha256(json.dumps(c.behaviours)
                                         + json.dumps(c.parameters)
                                         + str(c.termination_time)).hexdigest()
                # c.update_behaviour_times()
                # e.add_config(c)
            except KeyError as err:
                rospy.logwarn(err)

            try:  # exchange because approach despite present berries
                c = Config(
                    "thorvald_001",
                    "Exchange 3 - Subject {} - Mode {}".format(
                        subject_id, mode
                    ),
                )
                c.behaviours = BEHAVIOURS["exchange no call"]
                # c.behaviours = {}
                # # c.behaviours[2] = calls[subject_id][mode]
                # c.behaviours[2] = {
                #     "type": "message",
                #     "target": "picker_movement",
                #     "message": "deliver",
                # }
                c.parameters = {
                    "robot_position": [[11.41, 4.6285]],
                    "has_crate": [True],
                    "called_robot": [False],
                    "crate_full": [False],
                    "no_berry_places": [[]],
                    "picker_speed": [0.7],
                    "target_picker": ["picker02"],
                    "iterations": ["30"],
                }
                c.termination_time = 25
                c.experiment_id = sha256(json.dumps(c.behaviours)
                                         + json.dumps(c.parameters)
                                         + str(c.termination_time)).hexdigest()
                # c.update_behaviour_times()
                # e.add_config(c)
            except KeyError as err:
                rospy.logwarn(err)

            try:  # leave
                c = Config(
                    "thorvald_001",
                    "Leave - Subject {} - Mode {}".format(subject_id, mode),
                )
                c.behaviours = BEHAVIOURS["picking berries"]
                # c.behaviours = {}
                c.parameters = {
                    "robot_position": [[14.12, 4.63]],
                    "called_robot": [False],
                    "dismissed_robot": [True],
                    "has_crate": [True],
                    "crate_full": [False],
                    "picker_speed": [0.7],
                    "full_crate_count": [2],
                    "no_berry_places": [["WayPoint103", "WayPoint104"]],
                    "target_picker": ["picker02"],
                    # "target_picker": ["Subject{:02d}-Mode-{:}".format(subject_id, mode)],
                    "iterations": ["30"],
                }
                c.termination_time = 15
                c.experiment_id = sha256(json.dumps(c.behaviours)
                                         + json.dumps(c.parameters)
                                         + str(c.termination_time)).hexdigest()
                # c.update_behaviour_times()
                # e.add_config(c)
            except KeyError as err:
                rospy.logwarn(err)

            try:  # come closer because picker has a full crate
                c = Config(
                    "thorvald_001",
                    "Approach 2 - Subject {} - Mode {}".format(
                        subject_id, mode
                    ),
                )
                c.behaviours = BEHAVIOURS["exchange no call"]
                # c.behaviours = {}
                # c.behaviours[1] = picks[subject_id][mode]
                # c.behaviours[4] = calls[subject_id][mode]
                c.parameters = {
                    "robot_position": [[5.53, 4.62]],
                    "called_robot": [False],
                    "has_crate": [True],
                    "crate_full": [True],
                    "picker_speed": [0.7],
                    "no_berry_places": [
                        ["Waypoint103", "WayPoint104"]
                    ],  # , []],
                    "target_picker": ["picker02"],
                    # "target_picker": ["Subject{:02d}-Mode-{:}".format(subject_id, mode)],
                    "iterations": ["30"],
                }
                c.termination_time = 20
                c.experiment_id = sha256(json.dumps(c.behaviours)
                                         + json.dumps(c.parameters)
                                         + str(c.termination_time)).hexdigest()
                # c.update_behaviour_times()
                # e.add_config(c)
            except KeyError as err:
                rospy.logwarn(err)

            try:  # wait because picker has no crate
                c = Config(
                    "thorvald_001",
                    "Wait 1 - Subject {} - Mode {}".format(subject_id, mode),
                )
                c.behaviours = BEHAVIOURS["deliver no call"]
                # c.behaviours = {}
                # c.behaviours[1] = picks[subject_id][mode]
                # c.behaviours[4] = calls[subject_id][mode]
                c.parameters = {
                    "robot_position": [[11.41, 4.6285]],
                    "called_robot": [False],
                    "dismissed_robot": [False],
                    "has_crate": [False],
                    "crate_full": [True, False],
                    "picker_speed": [0.7],
                    "no_berry_places": [
                        ["Waypoint103", "WayPoint104"]
                    ],  # , []],
                    "target_picker": ["picker02"],
                    # "target_picker": ["Subject{:02d}-Mode-{:}".format(subject_id, mode)],
                    "iterations": ["30"],
                }
                c.termination_time = 20
                c.experiment_id = sha256(json.dumps(c.behaviours)
                                         + json.dumps(c.parameters)
                                         + str(c.termination_time)).hexdigest()
                # c.update_behaviour_times()
                # e.add_config(c)
            except KeyError as err:
                rospy.logwarn(err)

            try:  # wait because picker's crate is full
                c = Config(
                    "thorvald_001",
                    "Wait 2 - Subject {} - Mode {}".format(subject_id, mode),
                )
                c.behaviours = BEHAVIOURS["exchange no call"]
                # c.behaviours = {}
                # c.behaviours[1] = picks[subject_id][mode]
                # c.behaviours[4] = calls[subject_id][mode]
                c.parameters = {
                    "robot_position": [[11.41, 4.6285]],
                    "called_robot": [False],
                    "dismissed_robot": [False],
                    "has_crate": [True],
                    "crate_full": [True],
                    "picker_speed": [0.7],
                    "no_berry_places": [["Waypoint103", "WayPoint104"]],
                    "target_picker": ["picker02"],
                    # "target_picker": ["Subject{:02d}-Mode-{:}".format(subject_id, mode)],
                    "iterations": ["30"],
                }
                c.termination_time = 10
                c.experiment_id = sha256(json.dumps(c.behaviours)
                                         + json.dumps(c.parameters)
                                         + str(c.termination_time)).hexdigest()
                # c.update_behaviour_times()
                # e.add_config(c)
            except KeyError as err:
                rospy.logwarn(err)

            try:  # approach because picker raised their hand
                c = Config(
                    "thorvald_001",
                    "CloseApproach 2 - Subject {} - Mode {}".format(subject_id, mode),
                )
                c.behaviours = BEHAVIOURS["exchange wait after call"]
                # c.behaviours = {}
                # c.behaviours[1] = picks[subject_id][mode]
                # c.behaviours[4] = calls[subject_id][mode]
                # c.behaviours[5] = {
                #     "type": "message",
                #     "target": "picker_movement",
                #     "message": "deliver",
                # }
                c.parameters = {
                    "robot_position": [[11.41, 4.6285]],
                    "called_robot": [True],
                    "dismissed_robot": [False],
                    "has_crate": [True],
                    "crate_full": [True],
                    "picker_speed": [0.7],
                    "no_berry_places": [["Waypoint103", "WayPoint104"]],
                    "target_picker": ["picker02"],
                    # "target_picker": ["Subject{:02d}-Mode-{:}".format(subject_id, mode)],
                    "iterations": ["30"],
                }
                c.termination_time = 15
                c.experiment_id = sha256(json.dumps(c.behaviours)
                                         + json.dumps(c.parameters)
                                         + str(c.termination_time)).hexdigest()
                # c.update_behaviour_times()
                # e.add_config(c)
            except KeyError as err:
                rospy.logwarn(err)

            try:  # variance testing short
                c = Config(
                    "thorvald_001",
                    "Variance Test 1 Waypoint - Mode {}".format(mode),
                )
                c.behaviours = BEHAVIOURS["wait"]
                # c.behaviours = {}
                c.parameters = {
                    "robot_position": [[8.675, 4.6285]],
                    "target": [["WayPoint103"]]*100,
                    "iterations": ["30"],
                }
                c.termination_time = 7
                # c.update_behaviour_times()
                # e.add_config(c)
            except KeyError as err:
                rospy.logwarn(err)

            try:  # variance testing long
                c = Config(
                    "thorvald_001",
                    "Variance Test 3 Waypoints - Mode {}".format(mode),
                )
                c.behaviours = BEHAVIOURS["wait"]
                # c.behaviours = {}
                c.parameters = {
                    "robot_position": [[8.675, 4.6285]],
                    "target": [["WayPoint105"]]*100,
                    "iterations": ["30"],
                }
                c.termination_time = 16
                c.experiment_id = sha256(json.dumps(c.behaviours)
                                         + json.dumps(c.parameters)
                                         + str(c.termination_time)).hexdigest()
                # c.update_behaviour_times()
                # e.add_config(c)
            except KeyError as err:
                rospy.logwarn(err)

            try:  # deliver because picker called
                c = Config(
                    "thorvald_001",
                    "Delivery - Subject {} - Mode {}".format(subject_id, mode),
                )
                c.behaviours = BEHAVIOURS["deliver no wait"]
                # c.behaviours[2] = calls[subject_id][mode]
                # c.behaviours[2] = {
                #     "type": "message",
                #     "target": "picker_movement",
                #     "message": "deliver",
                # }
                c.parameters = {
                    "robot_position": [[11.41, 4.6285]],
                    "called_robot": [False],  # , False],
                    "has_crate": [False],
                    "crate_full": [True],  # , False],
                    "picker_speed": [0.7],
                    "full_crate_count": [1],
                    "empty_crate_count": [2],
                    "no_berry_places": [["WayPoint103", "WayPoint104"]],
                    "target_picker": ["picker01"],
                    # "pickers": [["picker01", "picker02", "picker02",
                    #             "picker03", "picker04", "picker05",
                    #             "picker06", "picker07", "picker08",
                    #             "picker09", "picker10"]],
                    # "target_picker": ["Subject{:02d}-Mode-{:}".format(subject_id, mode)],
                    "iterations": ["30"],
                }
                c.termination_time = 23
                c.experiment_id = sha256(json.dumps(c.behaviours)
                                         + json.dumps(c.parameters)
                                         + str(c.termination_time)).hexdigest()
                # c.update_behaviour_times()
                e.add_config(c)
            except KeyError as err:
                rospy.logwarn(err)
            try:  # deliver because picker called
                c = Config(
                    "thorvald_001",
                    "Delivery - Subject {} - Mode {}".format(subject_id, mode),
                )
                c.behaviours = BEHAVIOURS["deliver no call"]
                # c.behaviours[2] = calls[subject_id][mode]
                # c.behaviours[2] = {
                #     "type": "message",
                #     "target": "picker_movement",
                #     "message": "deliver",
                # }
                c.parameters = {
                    "robot_position": [[11.41, 4.6285]],
                    "called_robot": [False],  # , False],
                    "has_crate": [False],
                    "crate_full": [True],  # , False],
                    "picker_speed": [0.7],
                    "full_crate_count": [1],
                    "empty_crate_count": [2],
                    "no_berry_places": [["WayPoint103", "WayPoint104"]],
                    "target_picker": ["picker01"],
                    # "pickers": [["picker01", "picker02", "picker02",
                    #             "picker03", "picker04", "picker05",
                    #             "picker06", "picker07", "picker08",
                    #             "picker09", "picker10"]],
                    # "target_picker": ["Subject{:02d}-Mode-{:}".format(subject_id, mode)],
                    "iterations": ["30"],
                }
                c.termination_time = 23
                c.experiment_id = sha256(json.dumps(c.behaviours)
                                         + json.dumps(c.parameters)
                                         + str(c.termination_time)).hexdigest()
                # c.update_behaviour_times()
                # e.add_config(c)
            except KeyError as err:
                rospy.logwarn(err)

    print("EXPE: Starting Experimenter")
    e.run()
